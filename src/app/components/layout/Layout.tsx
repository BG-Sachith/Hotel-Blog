'use client';
import { styled } from '@mui/material/styles';
import {
  AppBar,
  alpha,
  InputBase,
  Toolbar,
  IconButton,
  Box,
  Avatar,
  Button,
  Tooltip,
  CssBaseline,
  Backdrop,
  CircularProgress,
  Container,
} from '@mui/material';
import dynamic from 'next/dynamic';
import React, { useEffect, useRef, useState } from 'react';
import { User } from '@/modules/user';
import { useSession } from 'next-auth/react';
import { usePathname, useRouter } from 'next/navigation';

import SearchIcon from '@mui/icons-material/Search';
import headerNavLinks from './headerNavLinks';
import WbSunnyTwoToneIcon from '@mui/icons-material/WbSunnyTwoTone';
import NightlightTwoToneIcon from '@mui/icons-material/NightlightTwoTone';
import NavigationIcon from '@mui/icons-material/Navigation';
import MenuIcon from '@mui/icons-material/Menu';
import { Metadata } from 'next';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '@/provider/redux/store';
import { toggleTheme } from '@/provider/redux/features/ToggleTheme';
import {
  toggleDrwAdm,
  toggleEditMode,
  toggleHideMe,
} from '@/provider/redux/features/Settings';
import {
  updateNavCategories,
  updateNavSearchValue,
  updateTags,
} from '@/src/provider/redux/features/NavData';
import { findAllCategories } from '@/src/service/categoryService';
// import DrawerSettingsAdm from '../elements/DrawerSettingsAdm';
import { findAllTags } from '@/src/service/tagService';

export const metadata: Metadata = {
  title: 'Blog',
  description: 'Generated by create next app',
};

const Footer = dynamic(() => import('../footer/Footer'));

const DrawerSettingsAdm = dynamic(
  () => import('../elements/DrawerSettingsAdm')
);

const DropDownMenue2 = dynamic(() => import('../elements/DropDownMenue2'), {
  ssr: false,
});

const DropDownMenue = dynamic(() => import('../elements/DropDownMenue'), {
  ssr: false,
});

const StyledAppBar = styled(AppBar)`
  ${({ theme }) => `
-webkit-transition: all 1s ease-in-out;
-moz-transition: all 1s ease-in-out;
-o-transition: all 1s ease-in-out;
cursor: pointer;
// z-index: 2 !important;
position: fixed;
// opacity: 0.99 !important;
// background: hsla(0,0%,100%,1);
color:${theme.palette.text.primary};
 background-color: ${
   theme.palette.mode == 'light' ? 'white' : 'rgb(34, 43, 69)' // for white #7A809B
 };
  // background-color: white;//${theme.palette.secondary.main};
transition: {easing: {fadeInDown: 'cubic-bezier(0.4, 0, 0.2, 1)')}};
// &:hover {
// background-color: ${theme.palette.secondary.main};
// opacity: 1 !important;
// // transform: scale(1.3);
// }`}
`;

const Search = styled('div')(({ theme }) => ({
  position: 'relative',
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.white, 0.15),
  '&:hover': {
    backgroundColor: alpha(theme.palette.common.white, 0.25),
  },
  marginLeft: 0,
  width: '100%',
  [theme.breakpoints.up('sm')]: {
    marginLeft: theme.spacing(1),
    width: 'auto',
  },
}));

const SearchIconWrapper = styled('div')(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: '100%',
  position: 'absolute',
  pointerEvents: 'none',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: 'inherit',
  '& .MuiInputBase-input': {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      width: '12ch',
      '&:focus': {
        width: '20ch',
      },
    },
  },
  [theme.breakpoints.up('md')]: {
    fontSize: '13px',
  },
}));

export default function Layout({ children }: any) {
  const dispatch = useDispatch();
  const path = usePathname();
  const colorMode = useSelector((state: RootState) => state.toggleTheme.theme);
  const { isEdidMode, openDrwAdm, hideMe }: any = useSelector(
    (state: RootState) => state.settings
  );
  const { navCategories, navSearchValue }: any = useSelector(
    (state: RootState) => state.navData
  );

  // const [title, setTitle] = useState('');
  const [show, setShow] = useState(false);
  const [goTop, setGoTop] = useState(false);
  const [activeLnk, setActiveLink] = useState('/');
  const [isSearchVal, setIsSearchVal] = useState(false);
  const router = useRouter();
  const pathname = usePathname();
  const searchValue = useRef('');

  const { data: session, status } = useSession();
  const [isLoading, setLoading] = useState(true);
  const [isSerching, setIsSerching] = useState(false);

  // const [navItems, setNavItems] = useState(headerNavLinks);

  const handleAdmDrawerOpen = () => {
    dispatch(toggleHideMe(true));
    dispatch(toggleDrwAdm(false));
    // localStorage.setItem('hideMe', JSON.stringify(false));
    // localStorage.setItem('openDrwAdm', JSON.stringify(true));
  };

  const handleAdmDrawerClose = () => {
    dispatch(toggleDrwAdm(true));
    // localStorage.setItem('openDrwAdm', JSON.stringify(false));
  };

  let tmOut: any = null;
  const handleSearch = (e: any) => {
    // console.log(path.split('posts/search').length);
    e.preventDefault();
    let searchMe =
      (e.target.value && e.target.value.length > 3) ||
      (!e.target.value && pathname != '/') ||
      (e.target.value.length == 0 && pathname != '/');
    setIsSerching(searchMe);
    if (tmOut) clearTimeout(tmOut);
    tmOut = setTimeout(() => {
      setIsSearchVal(e.target.value?.length > 0);
      searchValue.current = e.target.value;
      if (searchMe && path.split('posts/search').length < 2)
        router.push(
          '/posts/search?search=' + (e.target.value ? e.target.value : '')
        );
      setIsSerching(false);
      clearTimeout(tmOut);
      dispatch(updateNavSearchValue(e.target.value));
    }, 1500);
  };

  const controlNavBar = () => {
    if (window.scrollY > 70) setShow(true);
    else setShow(false);
    if (window.scrollY > 400) setGoTop(true);
    else setGoTop(false);
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  const isAuthAdm = () => {
    return status == 'authenticated' && new User(session.user)?.role == 'ADMIN';
  };
  // useEffect(() => {
  //   let dir = router.locale == 'ar' ? 'rtl' : 'ltr'; // todo for language
  //   let lang = router.locale == 'ar' ? 'ar' : 'en';
  //   document.querySelector('html')?.setAttribute('dir', dir);
  //   document.querySelector('html')?.setAttribute('lang', lang);
  // }, [router.locale]);

  useEffect(() => {
    window.addEventListener('scroll', controlNavBar);
    // return window.removeEventListener('scroll', controlNavBar);
  }, []);

  useEffect(() => {
    findAllCategories(true).then((d: any) => {
      // console.log(d);
      if (d.data) dispatch(updateNavCategories(d.data));
    });
    findAllTags(true).then((d: any) => {
      if (d.data) dispatch(updateTags(d.data));
    });
  }, []);

  useEffect(() => {
    headerNavLinks.default = headerNavLinks.default.map((page: any) => {
      if (
        page.multi &&
        page.title == 'Category' &&
        navCategories &&
        navCategories?.length > 0
      ) {
        page.links = navCategories?.map((c: any) => {
          return {
            href:
              c && c != null && c != '' && c.name
                ? '/posts/search?category=' + c.name
                : '/',
            title: c.name,
            multi: false,
            active: false,
          };
        });
      }
      return page;
    });
  }, [navCategories]);

  useEffect(() => {
    if (session && session.user) {
      if (!isAuthAdm()) {
        dispatch(toggleEditMode(isEdidMode));
      } else dispatch(toggleDrwAdm(isEdidMode != 'true'));
    }
    setTimeout(() => setLoading(false), 500);
  }, [session?.user]);

  return (
    <>
      <StyledAppBar
        // position="static"
        className={`${
          show && 'affix'
        }  custom-card scroll-smooth shadow-none rounded-none`}
        sx={(theme) => ({
          borderRadius: 0,
          boxShadow: 'none',
          // backgroundColor: `${show && 'secondary.main'}`,
        })}
        // sx={{ backgroundColor: `${show && 'secondary.main'}` }}
      >
        <Container maxWidth="xl" className="border-bx">
          <Toolbar disableGutters>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              onClick={openDrwAdm ? handleAdmDrawerClose : handleAdmDrawerOpen}
              edge="start"
              sx={{
                marginRight: 5,
                display: { md: !isAuthAdm() ? 'none' : 'block' },
              }}
            >
              <MenuIcon />
            </IconButton>
            <Box
              sx={{
                flexGrow: 1,
                display: { xs: 'none', sm: 'none', md: 'block', lg: 'block' },
              }}
            ></Box>
            <Avatar
              sx={{
                width: 26,
                height: 26,
                // bgcolor: green[500],
                display: { xs: 'block', sm: 'block', md: 'none', lg: 'none' },
              }}
              variant="rounded"
              src="/images/logo.png"
              alt="Logo"
              onClick={() => router.push('/')}
            ></Avatar>
            <Box
              sx={{
                flexGrow: 1,
                display: { xs: 'block', sm: 'block', md: 'none', lg: 'none' },
              }}
            ></Box>
            <Box
              sx={{
                flexGrow: 1,
                display: { xs: 'flex', md: 'none' },
                overflow: 'auto',
                opacity: { xs: 0, sm: 0, md: 1 },
              }}
              className="overflow-visible"
            ></Box>

            <Avatar
              sx={{
                width: 32,
                height: 32,
                // bgcolor: green[500],
                display: { xs: 'none', sm: 'none', md: 'block', lg: 'block' },
              }}
              variant="rounded"
              src="/images/logo.png"
              onClick={() => router.push('/')}
              alt="Logo"
            ></Avatar>
            <Box
              sx={{
                flexGrow: 1,
                display: { xs: 'block', sm: 'block', md: 'none', lg: 'none' },
              }}
            ></Box>
            <Box sx={{ flexGrow: 0.01, display: { xs: 'none', md: 'flex' } }}>
              {headerNavLinks.default.map((page) =>
                page.multi ? (
                  <DropDownMenue
                    page={page}
                    activeLnk={activeLnk}
                    key={page.title}
                    drpDwnStyle={{ marginLeft: '0px !important' }}
                  />
                ) : (
                  <Button
                    key={page.title}
                    onClick={(e) => {
                      e.preventDefault();
                      router.push(page.href + '');
                      // window.location.reload();
                    }}
                    sx={(theme) => ({
                      color:
                        activeLnk == page.href
                          ? 'text.primary'
                          : 'text.secondary',
                      fontSize: '10px',
                      [theme.breakpoints.up('md')]: {
                        fontSize: '12px',
                      },
                    })}
                    className={activeLnk == page.href ? 'active-link' : ''}
                  >
                    {page.title}
                  </Button>
                )
              )}
            </Box>
            <Search
              sx={{
                pr: 0.5,
                display: { md: 'block', xs: 'none' },
              }}
            >
              <SearchIconWrapper>
                <SearchIcon
                  sx={(theme) => ({
                    display: isSearchVal ? 'none' : 'auto',
                    fontSize: '15px',
                    [theme.breakpoints.up('md')]: {
                      fontSize: '18px',
                    },
                  })}
                />
              </SearchIconWrapper>
              <StyledInputBase
                inputRef={searchValue}
                placeholder={'Search…'}
                inputProps={{ 'aria-label': 'search' }}
                onChange={handleSearch}
              />
              <SearchIcon
                sx={(theme) => ({
                  display: isSearchVal ? 'auto' : 'none',
                  fontSize: '15px',
                  [theme.breakpoints.up('md')]: {
                    fontSize: '18px',
                  },
                })}
              />
            </Search>

            <Box
              sx={{
                // display: { xs: 'none', md: 'flex' },
                // display: 'none',
                // width: '100%',
                alignItems: 'center',
                justifyContent: 'center',
                // bgcolor: 'background.default',
                color: 'text.primary',
                // borderRadius: 1,
                m: 1,
              }}
            >
              <Tooltip title="Theme">
                <IconButton
                  onClick={(e) => {
                    e.preventDefault();
                    dispatch(toggleTheme(colorMode));
                  }}
                >
                  <WbSunnyTwoToneIcon
                    sx={(theme) => ({
                      display: theme.palette.mode === 'light' ? 'none' : '',
                    })}
                  />
                  <NightlightTwoToneIcon
                    sx={(theme) => ({
                      display: theme.palette.mode === 'dark' ? 'none' : '',
                    })}
                  />
                </IconButton>
              </Tooltip>
            </Box>

            <Box sx={{ flexGrow: 0 }}></Box>

            <Box sx={{ flexGrow: 0 }}>
              <DropDownMenue2 items={headerNavLinks.settings} router={router} />
            </Box>
            <Box
              sx={{
                flexGrow: 1,
                display: { xs: 'none', sm: 'none', md: 'block', lg: 'block' },
              }}
            ></Box>
          </Toolbar>
        </Container>
      </StyledAppBar>
      <Box
        className={`custom-card overscroll-auto`}
        sx={{
          display: {
            xs: 'initial',
            sm: 'initial',
            md: !hideMe ? 'flex' : 'initial',
          },
          marginTop: '60px !important',
        }}
      >
        <CssBaseline />
        {(!hideMe || openDrwAdm) && (
          <DrawerSettingsAdm
            handleDrawerClose={handleAdmDrawerClose}
            open={openDrwAdm}
            handleDrawerOpen={handleAdmDrawerOpen}
          />
        )}
        <Box component="main" sx={{ flexGrow: 1 }}>
          <Box sx={{ minHeight: '100vh ' }}> {children}</Box>
          <Footer />
        </Box>
      </Box>
      <IconButton
        // variant="outlined"
        component="label"
        size="small"
        onClick={scrollToTop}
        style={{
          backgroundColor: 'rgb(226 232 240 / var(--tw-bg-opacity)) !important',
        }}
        className={`bg-slate-200 button-up font-semibold text-gray-400 hover:text-gray-900  ${
          goTop ? 'show' : ''
        }`}
      >
        <NavigationIcon
          aria-hidden="true"
          className="h-7 w-7 "
          style={{
            minWidth: '2rem !important',
            minHeight: '2rem !important',
          }}
        />
      </IconButton>
      <Backdrop
        sx={{
          color: '#fff',
          zIndex: 1,
        }}
        open={isSerching}
        // onClick={handleClose}
      >
        <CircularProgress color="inherit" />
      </Backdrop>
    </>
  );
}
